// 3a. Priority CPU Scheduling  
void priority_scheduling() {
    int n, bt[10], p[10], wt[10], tat[10], pr[10], i, j, temp;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter burst times and priorities: ");
    for(i = 0; i < n; i++) {
        scanf("%d%d", &bt[i], &pr[i]);
        p[i] = i + 1;
    }
    
    // Sort by priority
    for(i = 0; i < n-1; i++) {
        for(j = i+1; j < n; j++) {
            if(pr[i] > pr[j]) {
                temp = pr[i]; pr[i] = pr[j]; pr[j] = temp;
                temp = bt[i]; bt[i] = bt[j]; bt[j] = temp;
                temp = p[i]; p[i] = p[j]; p[j] = temp;
            }
        }
    }
    
    wt[0] = 0;
    for(i = 1; i < n; i++) wt[i] = wt[i-1] + bt[i-1];
    for(i = 0; i < n; i++) tat[i] = wt[i] + bt[i];
    
    printf("Process\tPriority\tBT\tWT\tTAT\n");
    for(i = 0; i < n; i++)
        printf("P%d\t%d\t\t%d\t%d\t%d\n", p[i], pr[i], bt[i], wt[i], tat[i]);
}






// 3b. Linked File Allocation
void linked_allocation() {
    int f[50], n, i, st, len, j, c = 0;
    for(i = 0; i < 50; i++) f[i] = 0;
    
    printf("Enter starting block and number of blocks: ");
    scanf("%d%d", &st, &n);
    
    printf("Enter block numbers: ");
    for(i = 0; i < n; i++) {
        scanf("%d", &len);
        if(f[len] == 0) {
            f[len] = 1;
            printf("Block %d allocated\n", len);
        } else {
            printf("Block %d already allocated\n", len);
        }
    }
}
