// 7a. Worst Fit Memory Allocation
void worst_fit() {
    int bsize[10], psize[10], allocation[10], m, n, i, j, worstIdx;
    printf("Enter number of blocks and processes: ");
    scanf("%d%d", &m, &n);
    
    printf("Enter block sizes: ");
    for(i = 0; i < m; i++) scanf("%d", &bsize[i]);
    
    printf("Enter process sizes: ");
    for(i = 0; i < n; i++) {
        scanf("%d", &psize[i]);
        allocation[i] = -1;
    }
    
    for(i = 0; i < n; i++) {
        worstIdx = -1;
        for(j = 0; j < m; j++) {
            if(bsize[j] >= psize[i]) {
                if(worstIdx == -1 || bsize[worstIdx] < bsize[j])
                    worstIdx = j;
            }
        }
        if(worstIdx != -1) {
            allocation[i] = worstIdx;
            bsize[worstIdx] -= psize[i];
        }
    }
    
    printf("Process\tSize\tBlock\n");
    for(i = 0; i < n; i++) {
        printf("%d\t%d\t", i+1, psize[i]);
        if(allocation[i] != -1) printf("%d\n", allocation[i]+1);
        else printf("Not Allocated\n");
    }
}






// 7b. LRU Page Replacement
void lru_page() {
    int n, frames, pages[50], frame[10], counter[10], i, j, min, faults = 0;
    printf("Enter number of pages and frames: ");
    scanf("%d%d", &n, &frames);
    
    printf("Enter page sequence: ");
    for(i = 0; i < n; i++) scanf("%d", &pages[i]);
    
    for(i = 0; i < frames; i++) {
        frame[i] = -1;
        counter[i] = 0;
    }
    
    for(i = 0; i < n; i++) {
        int flag = 0, pos = 0;
        for(j = 0; j < frames; j++) {
            if(frame[j] == pages[i]) {
                flag = 1;
                counter[j] = i + 1;
                break;
            }
        }
        
        if(flag == 0) {
            for(j = 0; j < frames; j++) {
                if(frame[j] == -1) {
                    pos = j;
                    break;
                }
            }
            
            if(j == frames) {
                min = 0;
                for(j = 1; j < frames; j++)
                    if(counter[j] < counter[min]) min = j;
                pos = min;
            }
            
            frame[pos] = pages[i];
            counter[pos] = i + 1;
            faults++;
        }
        
        printf("Page %d: ", pages[i]);
        for(j = 0; j < frames; j++) printf("%d ", frame[j]);
        printf("\n");
    }
    printf("Page faults: %d\n", faults);
}
