/ 6a. Best Fit Memory Allocation
void best_fit() {
    int bsize[10], psize[10], allocation[10], m, n, i, j, bestIdx;
    printf("Enter number of blocks and processes: ");
    scanf("%d%d", &m, &n);
    
    printf("Enter block sizes: ");
    for(i = 0; i < m; i++) scanf("%d", &bsize[i]);
    
    printf("Enter process sizes: ");
    for(i = 0; i < n; i++) {
        scanf("%d", &psize[i]);
        allocation[i] = -1;
    }
    
    for(i = 0; i < n; i++) {
        bestIdx = -1;
        for(j = 0; j < m; j++) {
            if(bsize[j] >= psize[i]) {
                if(bestIdx == -1 || bsize[bestIdx] > bsize[j])
                    bestIdx = j;
            }
        }
        if(bestIdx != -1) {
            allocation[i] = bestIdx;
            bsize[bestIdx] -= psize[i];
        }
    }
    
    printf("Process\tSize\tBlock\n");
    for(i = 0; i < n; i++) {
        printf("%d\t%d\t", i+1, psize[i]);
        if(allocation[i] != -1) printf("%d\n", allocation[i]+1);
        else printf("Not Allocated\n");
    }
}







// 6b. Optimal Page Replacement
void optimal_page() {
    int n, frames, pages[50], frame[10], i, j, k, pos, faults = 0;
    printf("Enter number of pages and frames: ");
    scanf("%d%d", &n, &frames);
    
    printf("Enter page sequence: ");
    for(i = 0; i < n; i++) scanf("%d", &pages[i]);
    
    for(i = 0; i < frames; i++) frame[i] = -1;
    
    for(i = 0; i < n; i++) {
        int flag = 0;
        for(j = 0; j < frames; j++) {
            if(frame[j] == pages[i]) {
                flag = 1;
                break;
            }
        }
        
        if(flag == 0) {
            int replace = -1;
            for(j = 0; j < frames; j++) {
                if(frame[j] == -1) {
                    replace = j;
                    break;
                }
            }
            
            if(replace == -1) {
                int farthest = i + 1;
                for(j = 0; j < frames; j++) {
                    int next_use = n;
                    for(k = i + 1; k < n; k++) {
                        if(pages[k] == frame[j]) {
                            next_use = k;
                            break;
                        }
                    }
                    if(next_use > farthest) {
                        farthest = next_use;
                        replace = j;
                    }
                }
            }
            
            frame[replace] = pages[i];
            faults++;
        }
        
        printf("Page %d: ", pages[i]);
        for(j = 0; j < frames; j++) printf("%d ", frame[j]);
        printf("\n");
    }
    printf("Page faults: %d\n", faults);
}
