// 4a. Round Robin CPU Scheduling
void round_robin() {
    int n, bt[10], wt[10], tat[10], rem_bt[10], i, t = 0, tq;
    printf("Enter number of processes and time quantum: ");
    scanf("%d%d", &n, &tq);
    printf("Enter burst times: ");
    for(i = 0; i < n; i++) {
        scanf("%d", &bt[i]);
        rem_bt[i] = bt[i];
    }
    
    while(1) {
        int done = 1;
        for(i = 0; i < n; i++) {
            if(rem_bt[i] > 0) {
                done = 0;
                if(rem_bt[i] > tq) {
                    t += tq;
                    rem_bt[i] -= tq;
                } else {
                    t += rem_bt[i];
                    wt[i] = t - bt[i];
                    rem_bt[i] = 0;
                }
            }
        }
        if(done == 1) break;
    }
    
    for(i = 0; i < n; i++) tat[i] = bt[i] + wt[i];
    printf("Process\tBT\tWT\tTAT\n");
    for(i = 0; i < n; i++)
        printf("P%d\t%d\t%d\t%d\n", i+1, bt[i], wt[i], tat[i]);
}






// 4b. Producer-Consumer with Semaphores
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#include <stdlib.h>

int buffer[10], in = 0, out = 0;
sem_t mutex, full, empty;

void* producer(void* arg) {
    int item;
    while(1) {
        item = rand() % 100;
        sem_wait(&empty);
        sem_wait(&mutex);
        buffer[in] = item;
        printf("Producer produced: %d\n", item);
        in = (in + 1) % 10;
        sem_post(&mutex);
        sem_post(&full);
        sleep(1);
    }
}

void* consumer(void* arg) {
    int item;
    while(1) {
        sem_wait(&full);
        sem_wait(&mutex);
        item = buffer[out];
        printf("Consumer consumed: %d\n", item);
        out = (out + 1) % 10;
        sem_post(&mutex);
        sem_post(&empty);
        sleep(1);
    }
}

void producer_consumer() {
    pthread_t prod, cons;
    sem_init(&mutex, 0, 1);
    sem_init(&full, 0, 0);
    sem_init(&empty, 0, 10);
    
    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);
    pthread_join(prod, NULL);
    pthread_join(cons, NULL);
}
